// Copyright Â© 2025 JENTIS GmbH
// Autogenerated from Pigeon (v26.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsJentisApi(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsJentisApi(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsJentisApi(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashJentisApi(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashJentisApi(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashJentisApi(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum Environment: Int {
  case live = 0
  case stage = 1
}

enum Protocol: Int {
  case http = 0
  case https = 1
}

enum ConsentValue: Int {
  case allow = 0
  case deny = 1
  case ncm = 2
}

/// Generated class from Pigeon that represents data sent in messages.
struct TrackConfig: Hashable {
  var trackDomain: String
  var container: String
  var environment: Environment
  var authorizationToken: String
  var version: String? = nil
  var debugCode: String? = nil
  var sessionTimeoutInSeconds: Int64? = nil
  var customProtocol: Protocol? = nil
  var enableOfflineTracking: Bool
  var offlineTimeout: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> TrackConfig? {
    let trackDomain = pigeonVar_list[0] as! String
    let container = pigeonVar_list[1] as! String
    let environment = pigeonVar_list[2] as! Environment
    let authorizationToken = pigeonVar_list[3] as! String
    let version: String? = nilOrValue(pigeonVar_list[4])
    let debugCode: String? = nilOrValue(pigeonVar_list[5])
    let sessionTimeoutInSeconds: Int64? = nilOrValue(pigeonVar_list[6])
    let customProtocol: Protocol? = nilOrValue(pigeonVar_list[7])
    let enableOfflineTracking = pigeonVar_list[8] as! Bool
    let offlineTimeout = pigeonVar_list[9] as! Int64

    return TrackConfig(
      trackDomain: trackDomain,
      container: container,
      environment: environment,
      authorizationToken: authorizationToken,
      version: version,
      debugCode: debugCode,
      sessionTimeoutInSeconds: sessionTimeoutInSeconds,
      customProtocol: customProtocol,
      enableOfflineTracking: enableOfflineTracking,
      offlineTimeout: offlineTimeout
    )
  }
  func toList() -> [Any?] {
    return [
      trackDomain,
      container,
      environment,
      authorizationToken,
      version,
      debugCode,
      sessionTimeoutInSeconds,
      customProtocol,
      enableOfflineTracking,
      offlineTimeout,
    ]
  }
  static func == (lhs: TrackConfig, rhs: TrackConfig) -> Bool {
    return deepEqualsJentisApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashJentisApi(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct JentisEvent: Hashable {
  var boolAttributes: [String: Bool]? = nil
  var stringAttributes: [String: String]? = nil
  var intAttributes: [String: Int64]? = nil
  var doubleAttributes: [String: Double]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> JentisEvent? {
    let boolAttributes: [String: Bool]? = nilOrValue(pigeonVar_list[0])
    let stringAttributes: [String: String]? = nilOrValue(pigeonVar_list[1])
    let intAttributes: [String: Int64]? = nilOrValue(pigeonVar_list[2])
    let doubleAttributes: [String: Double]? = nilOrValue(pigeonVar_list[3])

    return JentisEvent(
      boolAttributes: boolAttributes,
      stringAttributes: stringAttributes,
      intAttributes: intAttributes,
      doubleAttributes: doubleAttributes
    )
  }
  func toList() -> [Any?] {
    return [
      boolAttributes,
      stringAttributes,
      intAttributes,
      doubleAttributes,
    ]
  }
  static func == (lhs: JentisEvent, rhs: JentisEvent) -> Bool {
    return deepEqualsJentisApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashJentisApi(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Enrichment: Hashable {
  var pluginId: String
  var arguments: [String: Any?]? = nil
  var variables: [String]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Enrichment? {
    let pluginId = pigeonVar_list[0] as! String
    let arguments: [String: Any?]? = nilOrValue(pigeonVar_list[1])
    let variables: [String]? = nilOrValue(pigeonVar_list[2])

    return Enrichment(
      pluginId: pluginId,
      arguments: arguments,
      variables: variables
    )
  }
  func toList() -> [Any?] {
    return [
      pluginId,
      arguments,
      variables,
    ]
  }
  static func == (lhs: Enrichment, rhs: Enrichment) -> Bool {
    return deepEqualsJentisApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashJentisApi(value: toList(), hasher: &hasher)
  }
}

private class JentisApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return Environment(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return Protocol(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ConsentValue(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      return TrackConfig.fromList(self.readValue() as! [Any?])
    case 133:
      return JentisEvent.fromList(self.readValue() as! [Any?])
    case 134:
      return Enrichment.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class JentisApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Environment {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? Protocol {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? ConsentValue {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? TrackConfig {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? JentisEvent {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? Enrichment {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class JentisApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return JentisApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return JentisApiPigeonCodecWriter(data: data)
  }
}

class JentisApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = JentisApiPigeonCodec(readerWriter: JentisApiPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol JentisApi {
  func initialize(config: TrackConfig) throws
  func restartConfig(config: TrackConfig) throws
  func setConsents(consents: [String: ConsentValue], completion: @escaping (Result<Void, Error>) -> Void)
  func push(events: [JentisEvent]) throws
  func submit(customInitiator: String, completion: @escaping (Result<Void, Error>) -> Void)
  func addEnrichment(enrichment: Enrichment) throws
  func addCustomEnrichment(enrichment: Enrichment) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class JentisApiSetup {
  static var codec: FlutterStandardMessageCodec { JentisApiPigeonCodec.shared }
  /// Sets up an instance of `JentisApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: JentisApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.jentis_flutter.JentisApi.initialize\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! TrackConfig
        do {
          try api.initialize(config: configArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let restartConfigChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.jentis_flutter.JentisApi.restartConfig\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      restartConfigChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! TrackConfig
        do {
          try api.restartConfig(config: configArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      restartConfigChannel.setMessageHandler(nil)
    }
    let setConsentsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.jentis_flutter.JentisApi.setConsents\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setConsentsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let consentsArg = args[0] as? [String: ConsentValue]
        api.setConsents(consents: consentsArg!) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setConsentsChannel.setMessageHandler(nil)
    }
    let pushChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.jentis_flutter.JentisApi.push\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pushChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let eventsArg = args[0] as! [JentisEvent]
        do {
          try api.push(events: eventsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pushChannel.setMessageHandler(nil)
    }
    let submitChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.jentis_flutter.JentisApi.submit\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      submitChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let customInitiatorArg = args[0] as! String
        api.submit(customInitiator: customInitiatorArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      submitChannel.setMessageHandler(nil)
    }
    let addEnrichmentChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.jentis_flutter.JentisApi.addEnrichment\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addEnrichmentChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enrichmentArg = args[0] as! Enrichment
        do {
          try api.addEnrichment(enrichment: enrichmentArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addEnrichmentChannel.setMessageHandler(nil)
    }
    let addCustomEnrichmentChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.jentis_flutter.JentisApi.addCustomEnrichment\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addCustomEnrichmentChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enrichmentArg = args[0] as! Enrichment
        do {
          try api.addCustomEnrichment(enrichment: enrichmentArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addCustomEnrichmentChannel.setMessageHandler(nil)
    }
  }
}
