// Copyright Â© 2025 JENTIS GmbH
// Autogenerated from Pigeon (v26.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum Environment {
  live,
  stage,
}

enum Protocol {
  http,
  https,
}

enum ConsentValue {
  allow,
  deny,
  ncm,
}

class TrackConfig {
  TrackConfig({
    required this.trackDomain,
    required this.container,
    required this.environment,
    required this.authorizationToken,
    this.version,
    this.debugCode,
    this.sessionTimeoutInSeconds,
    this.customProtocol,
    this.enableOfflineTracking = true,
    required this.offlineTimeout,
  });

  String trackDomain;

  String container;

  Environment environment;

  String authorizationToken;

  String? version;

  String? debugCode;

  int? sessionTimeoutInSeconds;

  Protocol? customProtocol;

  bool enableOfflineTracking;

  int offlineTimeout;

  List<Object?> _toList() {
    return <Object?>[
      trackDomain,
      container,
      environment,
      authorizationToken,
      version,
      debugCode,
      sessionTimeoutInSeconds,
      customProtocol,
      enableOfflineTracking,
      offlineTimeout,
    ];
  }

  Object encode() {
    return _toList();  }

  static TrackConfig decode(Object result) {
    result as List<Object?>;
    return TrackConfig(
      trackDomain: result[0]! as String,
      container: result[1]! as String,
      environment: result[2]! as Environment,
      authorizationToken: result[3]! as String,
      version: result[4] as String?,
      debugCode: result[5] as String?,
      sessionTimeoutInSeconds: result[6] as int?,
      customProtocol: result[7] as Protocol?,
      enableOfflineTracking: result[8]! as bool,
      offlineTimeout: result[9]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! TrackConfig || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class JentisEvent {
  JentisEvent({
    this.boolAttributes,
    this.stringAttributes,
    this.intAttributes,
    this.doubleAttributes,
  });

  Map<String, bool>? boolAttributes;

  Map<String, String>? stringAttributes;

  Map<String, int>? intAttributes;

  Map<String, double>? doubleAttributes;

  List<Object?> _toList() {
    return <Object?>[
      boolAttributes,
      stringAttributes,
      intAttributes,
      doubleAttributes,
    ];
  }

  Object encode() {
    return _toList();  }

  static JentisEvent decode(Object result) {
    result as List<Object?>;
    return JentisEvent(
      boolAttributes: (result[0] as Map<Object?, Object?>?)?.cast<String, bool>(),
      stringAttributes: (result[1] as Map<Object?, Object?>?)?.cast<String, String>(),
      intAttributes: (result[2] as Map<Object?, Object?>?)?.cast<String, int>(),
      doubleAttributes: (result[3] as Map<Object?, Object?>?)?.cast<String, double>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! JentisEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class Enrichment {
  Enrichment({
    required this.pluginId,
    this.arguments,
    this.variables,
  });

  String pluginId;

  Map<String, Object?>? arguments;

  List<String>? variables;

  List<Object?> _toList() {
    return <Object?>[
      pluginId,
      arguments,
      variables,
    ];
  }

  Object encode() {
    return _toList();  }

  static Enrichment decode(Object result) {
    result as List<Object?>;
    return Enrichment(
      pluginId: result[0]! as String,
      arguments: (result[1] as Map<Object?, Object?>?)?.cast<String, Object?>(),
      variables: (result[2] as List<Object?>?)?.cast<String>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Enrichment || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is Environment) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is Protocol) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is ConsentValue) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is TrackConfig) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is JentisEvent) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is Enrichment) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : Environment.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : Protocol.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ConsentValue.values[value];
      case 132: 
        return TrackConfig.decode(readValue(buffer)!);
      case 133: 
        return JentisEvent.decode(readValue(buffer)!);
      case 134: 
        return Enrichment.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class JentisApi {
  /// Constructor for [JentisApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  JentisApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> initialize(TrackConfig config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.jentis_flutter.JentisApi.initialize$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[config]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> restartConfig(TrackConfig config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.jentis_flutter.JentisApi.restartConfig$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[config]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setConsents(Map<String, ConsentValue> consents) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.jentis_flutter.JentisApi.setConsents$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[consents]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> push(List<JentisEvent> events) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.jentis_flutter.JentisApi.push$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[events]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> submit([String customInitiator = 'JENTIS Datalayer SENT']) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.jentis_flutter.JentisApi.submit$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[customInitiator]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addEnrichment(Enrichment enrichment) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.jentis_flutter.JentisApi.addEnrichment$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enrichment]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addCustomEnrichment(Enrichment enrichment) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.jentis_flutter.JentisApi.addCustomEnrichment$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enrichment]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}
