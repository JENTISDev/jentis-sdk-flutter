// Copyright Â© 2025 JENTIS GmbH
// Autogenerated from Pigeon (v26.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object JentisApiPigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class Environment(val raw: Int) {
  LIVE(0),
  STAGE(1);

  companion object {
    fun ofRaw(raw: Int): Environment? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class Protocol(val raw: Int) {
  HTTP(0),
  HTTPS(1);

  companion object {
    fun ofRaw(raw: Int): Protocol? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ConsentValue(val raw: Int) {
  ALLOW(0),
  DENY(1),
  NCM(2);

  companion object {
    fun ofRaw(raw: Int): ConsentValue? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class TrackConfig (
  val trackDomain: String,
  val container: String,
  val environment: Environment,
  val authorizationToken: String,
  val version: String? = null,
  val debugCode: String? = null,
  val sessionTimeoutInSeconds: Long? = null,
  val customProtocol: Protocol? = null,
  val enableOfflineTracking: Boolean,
  val offlineTimeout: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): TrackConfig {
      val trackDomain = pigeonVar_list[0] as String
      val container = pigeonVar_list[1] as String
      val environment = pigeonVar_list[2] as Environment
      val authorizationToken = pigeonVar_list[3] as String
      val version = pigeonVar_list[4] as String?
      val debugCode = pigeonVar_list[5] as String?
      val sessionTimeoutInSeconds = pigeonVar_list[6] as Long?
      val customProtocol = pigeonVar_list[7] as Protocol?
      val enableOfflineTracking = pigeonVar_list[8] as Boolean
      val offlineTimeout = pigeonVar_list[9] as Long
      return TrackConfig(trackDomain, container, environment, authorizationToken, version, debugCode, sessionTimeoutInSeconds, customProtocol, enableOfflineTracking, offlineTimeout)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      trackDomain,
      container,
      environment,
      authorizationToken,
      version,
      debugCode,
      sessionTimeoutInSeconds,
      customProtocol,
      enableOfflineTracking,
      offlineTimeout,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is TrackConfig) {
      return false
    }
    if (this === other) {
      return true
    }
    return JentisApiPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class JentisEvent (
  val boolAttributes: Map<String, Boolean>? = null,
  val stringAttributes: Map<String, String>? = null,
  val intAttributes: Map<String, Long>? = null,
  val doubleAttributes: Map<String, Double>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): JentisEvent {
      val boolAttributes = pigeonVar_list[0] as Map<String, Boolean>?
      val stringAttributes = pigeonVar_list[1] as Map<String, String>?
      val intAttributes = pigeonVar_list[2] as Map<String, Long>?
      val doubleAttributes = pigeonVar_list[3] as Map<String, Double>?
      return JentisEvent(boolAttributes, stringAttributes, intAttributes, doubleAttributes)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      boolAttributes,
      stringAttributes,
      intAttributes,
      doubleAttributes,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is JentisEvent) {
      return false
    }
    if (this === other) {
      return true
    }
    return JentisApiPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Enrichment (
  val pluginId: String,
  val arguments: Map<String, Any?>? = null,
  val variables: List<String>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): Enrichment {
      val pluginId = pigeonVar_list[0] as String
      val arguments = pigeonVar_list[1] as Map<String, Any?>?
      val variables = pigeonVar_list[2] as List<String>?
      return Enrichment(pluginId, arguments, variables)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      pluginId,
      arguments,
      variables,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is Enrichment) {
      return false
    }
    if (this === other) {
      return true
    }
    return JentisApiPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class JentisApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          Environment.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          Protocol.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ConsentValue.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TrackConfig.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          JentisEvent.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Enrichment.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Environment -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is Protocol -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is ConsentValue -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is TrackConfig -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is JentisEvent -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is Enrichment -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface JentisApi {
  fun initialize(config: TrackConfig)
  fun restartConfig(config: TrackConfig)
  fun setConsents(consents: Map<String, ConsentValue>, callback: (Result<Unit>) -> Unit)
  fun push(events: List<JentisEvent>)
  fun submit(customInitiator: String, callback: (Result<Unit>) -> Unit)
  fun addEnrichment(enrichment: Enrichment)
  fun addCustomEnrichment(enrichment: Enrichment)

  companion object {
    /** The codec used by JentisApi. */
    val codec: MessageCodec<Any?> by lazy {
      JentisApiPigeonCodec()
    }
    /** Sets up an instance of `JentisApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: JentisApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.jentis_flutter.JentisApi.initialize$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configArg = args[0] as TrackConfig
            val wrapped: List<Any?> = try {
              api.initialize(configArg)
              listOf(null)
            } catch (exception: Throwable) {
              JentisApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.jentis_flutter.JentisApi.restartConfig$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configArg = args[0] as TrackConfig
            val wrapped: List<Any?> = try {
              api.restartConfig(configArg)
              listOf(null)
            } catch (exception: Throwable) {
              JentisApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.jentis_flutter.JentisApi.setConsents$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val consentsArg = args[0] as Map<String, ConsentValue>
            api.setConsents(consentsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(JentisApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(JentisApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.jentis_flutter.JentisApi.push$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val eventsArg = args[0] as List<JentisEvent>
            val wrapped: List<Any?> = try {
              api.push(eventsArg)
              listOf(null)
            } catch (exception: Throwable) {
              JentisApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.jentis_flutter.JentisApi.submit$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val customInitiatorArg = args[0] as String
            api.submit(customInitiatorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(JentisApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(JentisApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.jentis_flutter.JentisApi.addEnrichment$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enrichmentArg = args[0] as Enrichment
            val wrapped: List<Any?> = try {
              api.addEnrichment(enrichmentArg)
              listOf(null)
            } catch (exception: Throwable) {
              JentisApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.jentis_flutter.JentisApi.addCustomEnrichment$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enrichmentArg = args[0] as Enrichment
            val wrapped: List<Any?> = try {
              api.addCustomEnrichment(enrichmentArg)
              listOf(null)
            } catch (exception: Throwable) {
              JentisApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
